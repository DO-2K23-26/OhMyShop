services:
  postgres:
    image: postgres:17
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      
  broker-1:
    image: apache/kafka:latest
    container_name: broker-1
    restart: unless-stopped
    ports:
      - 19092:9092
    environment:
      # Shared setup
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:19092,PLAINTEXT_HOST://:9092,CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker-1:9093,2@broker-2:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # Broker setup
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1:19092,PLAINTEXT_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    healthcheck:
      test:
        [
          'CMD',
          '/opt/kafka/bin/kafka-topics.sh',
          '--bootstrap-server',
          'localhost:9092',
          '--list',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  broker-2:
    image: apache/kafka:latest
    container_name: broker-2
    restart: unless-stopped
    ports:
      - 29092:9092
    environment:
      # Shared setup
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:19092,PLAINTEXT_HOST://:9092,CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker-1:9093,2@broker-2:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # Broker setup
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-2:19092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    healthcheck:
      test:
        [
          'CMD',
          '/opt/kafka/bin/kafka-topics.sh',
          '--bootstrap-server',
          'localhost:9092',
          '--list',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  init-topics:
    image: apache/kafka:latest
    depends_on:
      - broker-1
      - broker-2
    environment:
      BOOTSTRAP_SERVERS: broker-1:19092
    entrypoint: >
      bash -c '
        echo "Waiting for Kafka to be ready...";
        for i in {1..30}; do
          /opt/kafka/bin/kafka-topics.sh --bootstrap-server broker-1:19092 --list && break || sleep 2;
        done;
        echo "Creating topics...";
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server broker-1:19092 --topic Client --partitions 2 --replication-factor 2 &&
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server broker-1:19092 --topic Product --partitions 2 --replication-factor 2 &&
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server broker-1:19092 --topic Command --partitions 2 --replication-factor 2;
        echo "Kafka initialization complete.";'

  akhq:
    image: tchiotludo/akhq
    restart: unless-stopped
    depends_on:
      - broker-1
      - broker-2
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "broker-1:19092,broker-2:19092"
    ports:
      - 8080:8080
      - controller

  minio:
    image: 'minio/minio:latest'
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: password
    command: 'minio server /data --console-address ":9001"'
    healthcheck:
      test:
        - CMD
        - curl
        - '-f'
        - 'http://localhost:9000/minio/health/live'
      retries: 3
      timeout: 5s

  init-minio:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (mc alias set myminio http://minio:9000 minio password); do echo 'Waiting for MinIO...'; sleep 3; done;
      mc mb myminio/iceberg-tables;
      mc mb myminio/parquet-files;
      mc anonymous set public myminio/parquet-files;
      mc anonymous set public myminio/iceberg-tables;
      echo 'Buckets created and policies set!';
      "
