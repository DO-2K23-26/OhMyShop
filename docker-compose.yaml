networks:
  default:

services:
  postgres:
    image: postgres:17
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres

  broker-1:
    networks:
      - default
    image: apache/kafka:latest
    container_name: broker-1
    restart: unless-stopped
    ports:
      - 19092:19092
    environment:
      # Shared setup
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:19092,CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker-1:9093,2@broker-2:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # Broker setup
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    healthcheck:
      test:
        [
          "CMD",
          "/opt/kafka/bin/kafka-topics.sh",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  broker-2:
    networks:
      - default
    image: apache/kafka:latest
    container_name: broker-2
    restart: unless-stopped
    ports:
      - 29092:29092
    environment:
      # Shared setup
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092,CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker-1:9093,2@broker-2:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # Broker setup
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-2:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    healthcheck:
      test:
        [
          "CMD",
          "/opt/kafka/bin/kafka-topics.sh",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  init-topics:
    image: apache/kafka:latest
    depends_on:
      broker-1:
        condition: service_healthy
      broker-2:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: broker-1:9092
    entrypoint: >
      bash -c '
        echo "Waiting for Kafka to be ready...";
        for i in {1..30}; do
          /opt/kafka/bin/kafka-topics.sh --bootstrap-server broker-1:9092 --list && break || sleep 2;
        done;
        echo "Creating topics...";
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server broker-1:9092 --topic Client --partitions 2 --replication-factor 2 &&
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server broker-1:9092 --topic Product --partitions 2 --replication-factor 2 &&
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server broker-1:9092 --topic Command --partitions 2 --replication-factor 2 &&
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server broker-1:9092 --topic Invoice --partitions 2 --replication-factor 2 &&
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server broker-1:9092 --topic DeadLetterQueue --partitions 2 --replication-factor 2;
        echo "Kafka initialization complete.";'

  schema-registry:
    networks:
      - default
    image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION:-latest}
    restart: unless-stopped
    ports:
      - 8085:8085
    depends_on:
      broker-1:
        condition: service_healthy
      broker-2:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://broker-1:9092"
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: "INFO"
    healthcheck:
      test:
        - CMD
        - curl
        - "-f"
        - "http://localhost:8085/subjects"
      retries: 3
      timeout: 5s

  akhq:
    image: tchiotludo/akhq
    volumes:
      - /opt/tibco/akd/repo/1.2/lib/tibftl-kafka-avro-1.2.0-thin.jar:/app/tibftl-kafka-avro-1.2.0-thin.jar
      - /opt/tibco/akd/repo/1.2/lib/deps:/app/deps
    restart: unless-stopped
    depends_on:
      broker-1:
        condition: service_healthy
      broker-2:
        condition: service_healthy
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "broker-1:9092"
              schema-registry:
                url: "http://schema-registry:8085"
      CLASSPATH: "/app/tibftl-kafka-avro-1.2.0-thin.jar:/app/deps/*"
    ports:
      - 8080:8080
    links:
      - broker-1
      - broker-2
      - schema-registry

  minio:
    image: "minio/minio:latest"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: password
      MINIO_REGION: us-east-1
      MINIO_REGION_NAME: us-east-1
    command: 'minio server /data --console-address ":9001"'
    healthcheck:
      test:
        - CMD
        - curl
        - "-f"
        - "http://localhost:9000/minio/health/live"
      retries: 3
      timeout: 5s

  init-minio:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      until (mc alias set myminio http://minio:9000 minio password); do echo 'Waiting for MinIO...'; sleep 3; done;
      mc mb myminio/omelette;
      mc anonymous set public myminio/omelette;
      mc admin user svcacct add myminio minio --access-key minio_access_key --secret-key minio_secret_key;
      mc mb myminio/omelette/parquet;
      echo 'Bucket created and policie set!';
      "

  kafka-connect:
    networks:
      - default
    image: confluentinc/cp-kafka-connect:7.4.0
    container_name: kafka-connect
    restart: unless-stopped
    ports:
      - "8083:8083"
    depends_on:
      broker-1:
        condition: service_healthy
      broker-2:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      init-topics:
        condition: service_completed_successfully
      init-minio:
        condition: service_completed_successfully
    environment:
      CONNECT_BOOTSTRAP_SERVERS: broker-1:9092,broker-2:9092
      CONNECT_GROUP_ID: "kafka-connect"

      # Internal topics
      CONNECT_CONFIG_STORAGE_TOPIC: "_connect-configs"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 2
      CONNECT_OFFSET_STORAGE_TOPIC: "_connect-offsets"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 2
      CONNECT_STATUS_STORAGE_TOPIC: "_connect-status"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 2

      # Converter
      CONNECT_KEY_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"

      # Other settings
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"

      # Schema Registry
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8085"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8085"
    command:
      - /bin/bash
      - -c
      - |
        confluent-hub install --no-prompt confluentinc/kafka-connect-s3:latest &&
        /etc/confluent/docker/run
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 10s
      timeout: 10s
      retries: 5

  init-kafka-connect:
    image: curlimages/curl:latest
    container_name: init-kafka-connect
    depends_on:
      kafka-connect:
        condition: service_healthy
    command: >
      /bin/sh -c '
      sleep 10 &&
      curl -X POST -H "Content-Type: application/json" --data @/config/s3-sink.json http://kafka-connect:8083/connectors;
      '
    volumes:
      - ./docker/kafka-connect/config:/config

  download-hive-plugin:
    image: alpine:latest
    container_name: download-hive-plugin
    command: >
      /bin/sh -c "
      wget -O /jars/aws-java-sdk-bundle-1.11.1026.jar https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-bundle/1.11.1026/aws-java-sdk-bundle-1.11.1026.jar &&
      wget -O /jars/hadoop-aws-3.3.6.jar https://repo1.maven.org/maven2/org/apache/hadoop/hadoop-aws/3.3.6/hadoop-aws-3.3.6.jar"
    volumes:
      - ./docker/hive/plugin:/jars

  hive-metastore:
    image: apache/hive:4.0.1
    container_name: hive-metastore
    environment:
      SERVICE_NAME: metastore
    depends_on:
      download-hive-plugin:
        condition: service_completed_successfully
    ports:
      - "9083:9083"
    volumes:
      - ./docker/hive/plugin/aws-java-sdk-bundle-1.11.1026.jar:/opt/hive/lib/aws-java-sdk-bundle-1.11.1026.jar
      - ./docker/hive/plugin/hadoop-aws-3.3.6.jar:/opt/hive/lib/hadoop-aws-3.3.6.jar
      - ./docker/hive/hive-site.xml:/opt/hive/conf/hive-site.xml

  trino:
    image: trinodb/trino:latest
    container_name: trino
    restart: unless-stopped
    depends_on:
      - hive-metastore
    ports:
      - 8081:8080
    volumes:
      - ./docker/trino/catalog:/etc/trino/catalog

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: trino-datasource
    volumes:
      - ./docker/grafana/plugins:/var/lib/grafana/plugins/trino
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
